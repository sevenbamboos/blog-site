<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on sevenbamboos&#39;s blog</title>
    <link>http://sevenbamboos.github.io/blog-site/post/</link>
    <description>Recent content in Posts on sevenbamboos&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>sevenbamboos@gmail.com, 13472650881@163.com (YuPing Wang)</managingEditor>
    <webMaster>sevenbamboos@gmail.com, 13472650881@163.com (YuPing Wang)</webMaster>
    <copyright>(c) 2016 YuPing Wang.</copyright>
    <lastBuildDate>Thu, 09 Jun 2016 15:53:39 +0800</lastBuildDate>
    <atom:link href="http://sevenbamboos.github.io/blog-site/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Code First in Entity framework</title>
      <link>http://sevenbamboos.github.io/blog-site/2016/06/09/code-first-in-entity-framework/</link>
      <pubDate>Thu, 09 Jun 2016 15:53:39 +0800</pubDate>
      <author>sevenbamboos@gmail.com, 13472650881@163.com (YuPing Wang)</author>
      <guid>http://sevenbamboos.github.io/blog-site/2016/06/09/code-first-in-entity-framework/</guid>
      <description>

&lt;h1 id=&#34;why-choose-code-first:b98304ee60e35e88471d39d4f23d0ffb&#34;&gt;Why choose code first&lt;/h1&gt;

&lt;p&gt;There are three major advantages to use code first:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Less configuration (no mapping file, no design model, no need to create table first)&lt;/li&gt;
&lt;li&gt;Easier to write code (no need to build complicated model or query)&lt;/li&gt;
&lt;li&gt;With some extra configuration, the generated/target database can be adapted to DBA&amp;rsquo;s requirements. At least, the difficulty is less than the opposite way.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;configure-the-correct-connection-string-in-dbcontext:b98304ee60e35e88471d39d4f23d0ffb&#34;&gt;Configure the correct connection string in DbContext&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;public EFSampleContext() : base(@&amp;quot;Data Source=(LocalDB)\MSSQLLocalDB; AttachDbFilename=the-path-to-local-mdf; MultipleActiveResultSets=true; Integrated Security = True; Connect Timeout = 30&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note that &lt;strong&gt;MultipleActiveResultSets&lt;/strong&gt; by default is false, making it impossible to use DbReader nested inside loop&lt;/p&gt;

&lt;h1 id=&#34;many-to-many-relationship:b98304ee60e35e88471d39d4f23d0ffb&#34;&gt;Many-to-many relationship&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ll illustrate this relationship with a wildly-used user&amp;amp;role model.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Role {
	// EF is able to recognize two kinds of naming conversions: TypeID or ID
	// Personally, I prefer the former except for the case of inheritance
	public int RoleID { get; set; }

	[Required]
	public string Name { get; set; }

	// easy way to give an initialized value
	public bool Active { get; set; } = true; 
}

public class User {
	public int UserID { get; set; }

	[Required]
	public string Name { get; set; }
	
	// EF can understand normal value object as long as it has no identity	
	public Address Address { get; set; } = new Address();

	// Make it virtual so that EF can implement logic such as lazy-loading under the hood
	// Also don&#39;t forget to initialize it before using (otherwise null pointer exception is waiting for you)
	public virtual ICollection&amp;lt;Role&amp;gt; Roles { get; set; } = new HashSet&amp;lt;Role&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside DbContext&amp;rsquo;s OnModelCreating method, add the following configuration. The idea to move as many as possible of configuration (annotation) from model to a specific place is to make model independent to persistence framework to make it more general and easier to read and maintain.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// I prefer to add schema for each generated table
modelBuilder.Entity&amp;lt;Role&amp;gt;().ToTable(&amp;quot;AppRole&amp;quot;, &amp;quot;EFSample&amp;quot;);

// many-to-many with one direction
// There is no link from role to user, so in this case we only need to configurate the user side
modelBuilder.Entity&amp;lt;User&amp;gt;().ToTable(&amp;quot;AppUser&amp;quot;, &amp;quot;EFSample&amp;quot;)
	.HasMany(u =&amp;gt; u.Roles)
	.WithMany()
	.Map(m =&amp;gt;
	{
		m.MapLeftKey(&amp;quot;UserID&amp;quot;);
		m.MapRightKey(&amp;quot;RoleID&amp;quot;);
		m.ToTable(&amp;quot;User_Role&amp;quot;, &amp;quot;EFSample&amp;quot;);
	});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we need to loop through all users to find roles for each of them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var ctx = new EFSampleContext()) {
	foreach (var user in ctx.Users.OrderBy(u =&amp;gt; u.UserID)) {

		// It would load each user&#39;s role, which is lazy-loaded by default
		//ctx.Entry&amp;lt;User&amp;gt;(user).Collection&amp;lt;Role&amp;gt;(u =&amp;gt; u.Roles).Load();

		// But since we are inside the lifetime of DbContext, just using the navigating property (Roles) directly can work
		// And this is where property &amp;quot;MultipleActiveResultSets&amp;quot; must be true
		foreach (var role in user.Roles) {
			Console.WriteLine($&amp;quot;{user.Name} has role: {role.Name}&amp;quot;);
		}
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we need to query users who have a specific role, then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var ctx = new EFSampleContext()) {
	var results = from u in ctx.Users
		from r in u.Roles
		where r.Name == &amp;quot;role 1&amp;quot;
		select u;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;many-to-one-and-one-to-many:b98304ee60e35e88471d39d4f23d0ffb&#34;&gt;Many-to-one and one-to-many&lt;/h1&gt;

&lt;p&gt;The many-to-one relationship here is each study belongs to one patient, while a patient can have multiple studies.
The one-to-many relationship here is an order can contain multiple studies, while each study can be (optional) included only in one order.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Patient
{
	public int PatientID { get; set; }

	// I find required annotation is acceptable and more readable to be put in model
	// By contrast, the relationships (navigating properties) are better to put somewhere outside model
	[Required]
	public string Name { get; set; }

	// DateTime is struct. That&#39;s how to set it as optional
	public DateTime? DateOfBirth { get; set; }

	// EF has no problem to recognize enum
	public Gender? Gender { get; set; }

	// For computable properties, use NotMapped to make EF skip processing them
	[NotMapped]
	public int? Age {
		get {
			TimeSpan? span = DateTime.Now - DateOfBirth;
			if (span.HasValue) {
				return (int)Math.Ceiling(span.Value.Days / 365m);
			} else {
				return null;
			}
		}

		private set { }
	}
}

public class Study {
	public int StudyID { get; set; }

	[Required]
	public string StudyUID { get; set; }

	[Required]
	public string Name { get; set; }

	public DateTime? ScheduleTime { get; set; }
	public virtual Patient Patient { get; set; }
	public virtual Order Order { get; set; }
}

public class Order {
	public int OrderID { get; set; }

	[Required]
	public string AccessionNumber { get; set; }

	public virtual ICollection&amp;lt;Study&amp;gt; Studies { get; set; } = new HashSet&amp;lt;Study&amp;gt;();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following in DbContext&amp;rsquo;s OnModelCreating method to fine-tune the model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;modelBuilder.Entity&amp;lt;Patient&amp;gt;().ToTable(&amp;quot;Patient&amp;quot;, &amp;quot;EFSample&amp;quot;);

modelBuilder.Entity&amp;lt;Study&amp;gt;().ToTable(&amp;quot;Study&amp;quot;, &amp;quot;EFSample&amp;quot;);

// one-to-many with two directions
modelBuilder.Entity&amp;lt;Order&amp;gt;().ToTable(&amp;quot;RisOrder&amp;quot;, &amp;quot;EFSample&amp;quot;)
	.HasMany(o =&amp;gt; o.Studies)
	.WithOptional(s =&amp;gt; s.Order)	// a study can have no order at all
	.Map(m =&amp;gt; m.MapKey(&amp;quot;OrderID&amp;quot;)); // Name a nicer foreign key, by default, it is NavigatingPropertyName_TargetTypeID

// many-to-one with one direction
modelBuilder.Entity&amp;lt;Study&amp;gt;()
	.HasRequired(s =&amp;gt; s.Patient) // a study must belong to a patient
	.WithMany()
	.Map(m =&amp;gt; m.MapKey(&amp;quot;PatientID&amp;quot;));

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that for required navigating property, the generated foreign keys will be marked as &lt;strong&gt;ON DELETE CASCADE&lt;/strong&gt;:
&lt;img src=&#34;http://sevenbamboos.github.io/blog-site/post/img/table-study.png&#34; alt=&#34;table-study&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Also notice that during saving a study to an order, both of the following ways is working:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;study.Order = anOrder;
// anOrder.Studies.Add(study)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is some example to play with the models&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var ctx = new EFSampleContext()) {

	// Query male patients
	var malePatients = from p in ctx.Patients
		where p.Gender == Gender.Male
		select p;
	foreach (var patient in malePatients) {
		Console.WriteLine($&amp;quot;{patient.Name}&amp;quot;);
	}

	// Loop orders and visit study and patient properties
	foreach (var o in ctx.Orders) {
		Console.WriteLine($&amp;quot;Order:{o.AccessionNumber}&amp;quot;);
		foreach (var s in o.Studies) {
			Console.WriteLine($&amp;quot;Study:{s.Name}, Patient:{s.Patient.Name} Gender({s.Patient.Gender}) Age={s.Patient.Age ?? 0}&amp;quot;);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;one-to-many-self-reference-and-table-per-inheritance:b98304ee60e35e88471d39d4f23d0ffb&#34;&gt;One-to-many self reference and table per inheritance&lt;/h1&gt;

&lt;p&gt;Category is a tree-like structure which has a point to parent and can contain more than one child categories.
Goods is an abstract class which can be represented by a series of concrete classes: Vehicle, Artwork and Estate each of which has different properties. Here I use one table to store the whole hierarchy.
AuctionItem is a model having links to user and goods, which is included here for the completeness of auction model&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Category {
	public int CategoryID { get; set; }
	public string Name { get; set; }

	public virtual Category Parent { get; set; }
	public virtual ICollection&amp;lt;Category&amp;gt; SubCategories { get; set; } = new HashSet&amp;lt;Category&amp;gt;();
}

public abstract class Goods {
	public int GoodsID { get; set; }
	public string Name { get; set; }

	public virtual Category Category { get; set; }
}

public class Vehicle : Goods {
	public string Manufacturer { get; set; }
	public string Model { get; set; }
	public int? Mileage { get; set; }
}

public class Artwork : Goods {
	public string Author { get; set; }
	public string Genre { get; set; }
}

public class Estate : Goods {
	public Address Address { get; set; } = new Address();
	public decimal? Area { get; set; }
	public DateTime? BuildTime { get; set; }
}

public class AuctionItem {
	public int AuctionItemID { get; set; }
	public decimal StartingPrice { get; set; }
	public decimal? BargainPrice { get; set; }
	public DateTime? BargainTime { get; set; }

	public Goods Goods { get; set; }
	public User Bargainer { get; set; }
}

modelBuilder.Entity&amp;lt;Category&amp;gt;().ToTable(&amp;quot;Category&amp;quot;, &amp;quot;EFSample&amp;quot;)
	.HasMany(c =&amp;gt; c.SubCategories)
	.WithOptional(c =&amp;gt; c.Parent)
	.Map(c =&amp;gt; c.MapKey(&amp;quot;ParentID&amp;quot;));

modelBuilder.Entity&amp;lt;Goods&amp;gt;().ToTable(&amp;quot;Goods&amp;quot;, &amp;quot;EFSample&amp;quot;)
	.Map&amp;lt;Vehicle&amp;gt;(m =&amp;gt; m.Requires(&amp;quot;GoodsType&amp;quot;).HasValue(0))
	.Map&amp;lt;Artwork&amp;gt;(m =&amp;gt; m.Requires(&amp;quot;GoodsType&amp;quot;).HasValue(1))
	.Map&amp;lt;Estate&amp;gt;(m =&amp;gt; m.Requires(&amp;quot;GoodsType&amp;quot;).HasValue(2));

modelBuilder.Entity&amp;lt;Goods&amp;gt;()
	.HasRequired(g =&amp;gt; g.Category)
	.WithMany()
	.Map(m =&amp;gt; m.MapKey(&amp;quot;CategoryID&amp;quot;));

modelBuilder.Entity&amp;lt;AuctionItem&amp;gt;().ToTable(&amp;quot;AuctionItem&amp;quot;, &amp;quot;EFSample&amp;quot;)
	.HasRequired(a =&amp;gt; a.Goods)
	.WithMany()
	.Map(m =&amp;gt; m.MapKey(&amp;quot;GoodsID&amp;quot;));

modelBuilder.Entity&amp;lt;AuctionItem&amp;gt;()
	.HasRequired(a =&amp;gt; a.Bargainer)
	.WithMany()
	.Map(m =&amp;gt; m.MapKey(&amp;quot;BargainerID&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The CRUD operations in EF will be included in the other articles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to build personal blog via Github Pages</title>
      <link>http://sevenbamboos.github.io/blog-site/2016/06/01/how-to-build-personal-blog-via-github-pages/</link>
      <pubDate>Wed, 01 Jun 2016 16:05:27 +0800</pubDate>
      <author>sevenbamboos@gmail.com, 13472650881@163.com (YuPing Wang)</author>
      <guid>http://sevenbamboos.github.io/blog-site/2016/06/01/how-to-build-personal-blog-via-github-pages/</guid>
      <description>

&lt;h1 id=&#34;config-hugo:3d7aab9f4bb9f5bcbc089980f699e2e5&#34;&gt;Config Hugo&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;
The configuration is straightforward and it lets you focus on the contents instead of web pages&amp;rsquo; style. It&amp;rsquo;s worth noting to include the following in config.toml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://xxx.github.io/yyy&amp;quot;
publishdir = &amp;quot;public&amp;quot;
canonifyurls = true // ensure css can be loaded
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;choose-a-theme:3d7aab9f4bb9f5bcbc089980f699e2e5&#34;&gt;Choose a theme&lt;/h1&gt;

&lt;p&gt;Without a theme, hugo won&amp;rsquo;t show anything but a blank page, which is definitely not welcome for novice. You can get a basic idea about what available themes look like from &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;. Then choose one from the &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;&lt;strong&gt;list&lt;/strong&gt;&lt;/a&gt; and execute the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir themes
cd themes
git clone git@github.com:mmrath/hugo-bootstrap.git // change the theme name if necessary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And don&amp;rsquo;t forget to add the theme name to config file to save some time of typing later on:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theme = &amp;quot;hugo-bootstrap&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&lt;strong&gt;TODO&lt;/strong&gt;] add more information for theme customization&lt;/p&gt;

&lt;h1 id=&#34;local-testing:3d7aab9f4bb9f5bcbc089980f699e2e5&#34;&gt;Local testing&lt;/h1&gt;

&lt;p&gt;The next step is to add contents by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/new-blog-item.md
hugo server -wD // including draft during the content generating
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once satisfied with the result, you can mark the file as non-draft and generate the content by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo // it&#39;s such a compact command without any unnecessary parameter
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;push-to-github-pages:3d7aab9f4bb9f5bcbc089980f699e2e5&#34;&gt;Push to Github Pages&lt;/h1&gt;

&lt;p&gt;Now the final step is to publish it to Github, which requires us to put the pages in a repository&amp;rsquo;s &amp;ldquo;gh-pages&amp;rdquo; branch. A very easy way for git novice is to create a separate repository specific for the generated web pages (of course, we have to create gh-pages branch as well). I suggest to use the follow strategy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd hugo_content_folder/public
git init
git add .
git ci -m &amp;quot;comments xxx&amp;quot;
git remote add origin git@github.com:xxx/yyy.git
git push origin master
git co --orphan gh-pages
git add .
git ci -m &amp;quot;comments yyy&amp;quot;
git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&lt;strong&gt;XXX&lt;/strong&gt;] How to simplify the preceding commands? When following the Hugo&amp;rsquo;s official document withe &amp;ldquo;git subtree&amp;rdquo; stuff, there is non-fast-forward error in my console!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>http://sevenbamboos.github.io/blog-site/2016/06/01/git/</link>
      <pubDate>Wed, 01 Jun 2016 14:22:09 +0800</pubDate>
      <author>sevenbamboos@gmail.com, 13472650881@163.com (YuPing Wang)</author>
      <guid>http://sevenbamboos.github.io/blog-site/2016/06/01/git/</guid>
      <description>

&lt;h1 id=&#34;git:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;Git&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;reference &lt;a href=&#34;http://www.jianshu.com/p/6d1ce5b65523&#34;&gt;http://www.jianshu.com/p/6d1ce5b65523&lt;/a&gt; and &lt;a href=&#34;http://learngitbranching.js.org/?demo&#34;&gt;http://learngitbranching.js.org/?demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;http://cmder.net/&#34;&gt;http://cmder.net/&lt;/a&gt; (including MsysGit)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name &amp;quot;xxx&amp;quot; 
git config --global user.email &amp;quot;xxx@yyy&amp;quot;
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
git config --list //~\.gitconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git status
git add .
git commit -m &amp;quot;xxx&amp;quot;
git commit -a -m &amp;quot;xxx&amp;quot; // without git add
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Revert&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reflog //review commit id for revert
git reset --hard xxx //commit id or HEAD^ (the next version), HEAD^^ (the next next version)
git checkout -- filename //revert when there is no local change **added**
git reset HEAD filename &amp;amp;&amp;amp; git checkout -- filename //revert **added** change, then revert local change
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm xxx
git rm --cache xxx // remove tracked file, but keep it locally
git rm -f xxx // remove file physically.
git mv xxx yyy
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Branch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b xxx // git branch xxx &amp;amp;&amp;amp; git checkout xxx
git merge xxx
git branch -d xxx //delete branch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;gitignore when it doesn&amp;rsquo;t work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm -r --cached .
git add .
git commit -m &#39;update .gitignore&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;github:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;Github&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Generate SSH key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -C&amp;quot;mail&amp;quot; //id_rsa and id_rsa.pub
ssh -T github.com
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;.ssh/config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host github.com
User git
Hostname ssh.github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa
Port 443
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Upload&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin git@github.com:sevenbamboos/test.git
git push origin master
git pull origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>